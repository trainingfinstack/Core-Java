Tree Set
---------

The Tree Set class of the Java Collections framework provides functionality of a tree data structure.

Treeset implements NavigableSet extends SortedSet extends Set.

creating a TreeSet
-------------------
package java.util.TreeSet

syntax
------
TreeSet<Integer> numbers=new TreeSet<>();

here we have created a TreeSet without any arguments. In This case the elements in TreeSet are Sorted naturally(Ascending order).


Methods of TreeSet
--------------------
add()   ---> to add the elements
addAll()
remove()
removeAll()
first()      ----->returns the first element of the set
last()	     ----->returns the last element of the set
ceiling(element)   --->
higher(element)		---> returns the element which is just greater than the given element from the set 
lower(element)		---->return the element which is just lower than the given element from the set
floor(element)		---->
pollFirst()		---->returns and removes the first element from the set
pollLast()		---->returns and removes the last element from the set

headSet(element)		---->returns all the elements of a tree set before the specified element (which is passed as an arguments)
headSet(element,boolean)		----->if we pass the boolean as true,returns all the elements of a tree set before that element including the that element also. 
tailSet(element,boolean)		---->returns all the after the specified element without including the specified element
but if we pass true then it will show all the elemetns of set including that element also


import java.util.TreeSet;

class Main {
    public static void main(String[] args) {
        TreeSet<Integer> numbers = new TreeSet<>();
        numbers.add(1);
        numbers.add(2);
        numbers.add(3);
        numbers.add(4);
        System.out.println("TreeSet1: " + numbers);

        TreeSet<Integer> primeNumbers = new TreeSet<>();
        primeNumbers.add(2);
        primeNumbers.add(3);
        System.out.println("TreeSet2: " + primeNumbers);

        // Check if primeNumbers is subset of numbers
        boolean result = numbers.containsAll(primeNumbers);
        System.out.println("Is TreeSet2 subset of TreeSet1? " + result);
    }
}



import java.util.TreeSet;;

class Main {
    public static void main(String[] args) 
{
        TreeSet<Integer> evenNumbers = new TreeSet<>();
        evenNumbers.add(2);
        evenNumbers.add(4);
        System.out.println("TreeSet1: " + evenNumbers);

        TreeSet<Integer> numbers = new TreeSet<>();
        numbers.add(1);
        numbers.add(2);
        numbers.add(3);
        numbers.add(4);
        System.out.println("TreeSet2: " + numbers);

        // Difference between two sets
        numbers.removeAll(evenNumbers);
        System.out.println("Difference is: " + numbers);
    }
}



mport java.util.TreeSet;;

class Main {
    public static void main(String[] args) {
        TreeSet<Integer> evenNumbers = new TreeSet<>();
        evenNumbers.add(2);
        evenNumbers.add(4);
        System.out.println("TreeSet1: " + evenNumbers);

        TreeSet<Integer> numbers = new TreeSet<>();
        numbers.add(1);
        numbers.add(2);
        numbers.add(3);
        System.out.println("TreeSet2: " + numbers);

        // Intersection of two sets
        numbers.retainAll(evenNumbers);
        System.out.println("Intersection is: " + numbers);
    }
}



import java.util.TreeSet;;

class Main {
    public static void main(String[] args) {
        TreeSet<Integer> evenNumbers = new TreeSet<>();
        evenNumbers.add(2);
        evenNumbers.add(4);
        System.out.println("TreeSet1: " + evenNumbers);

        TreeSet<Integer> numbers = new TreeSet<>();
        numbers.add(1);
        numbers.add(2);
        numbers.add(3);
        System.out.println("TreeSet2: " + numbers);

        // Union of two sets
        numbers.addAll(evenNumbers);
        System.out.println("Union is: " + numbers);

    }
}

TreeSet vs HashSet
------------------
both TreeSet as well as the HashSet implements the Set interface.However ,there exist some differences betweeen them.

-unlike HashSet elements in TreeSet are Sorted in some order.It is because TreeSet implements the SortedSet interface as well.

-TreeSet provides some method for easy navigation.For example first(),last(),headset(),tailSet() etc. It is because TreeSet also implements the NavigableSet interface.

-HashSet if Faster than the TreeSet for basic operations like Add,Remove,Contains and size.


TreeSetComparator
-----------------
in all the examples above ,TreeSet elements are sorted naturally.However we can also customize the ordering of elements

fir this we need to create our own comparator class based on which elements in a tree set are sorted.For Example,


import java.util.TreeSet;
import java.util.Comparator;

class Main {
    public static void main(String[] args) {

        // Creating a tree set with a customized comparator
        TreeSet<String> animals = new TreeSet<>(new CustomComparator());

        animals.add("Dog");
        animals.add("Zebra");
        animals.add("Cat");
        animals.add("Horse");
        System.out.println("TreeSet: " + animals);
    }

    // Creating a comparator class
    public static class CustomComparator implements Comparator<String> {

        @Override
        public int compare(String animal1, String animal2) {
            int value =  animal1.compareTo(animal2);

            // elements are sorted in reverse order
            if (value > 0) {
                return -1;
            }
            else if (value < 0) {
                return 1;
            }
            else {
                return 0;
            }
        }
    }
}

in the above example we have creaed a treeSet passing customComparator Class implements the Comparator interface.
We then override the compare() method .The method will now sort elements in reverse order.
